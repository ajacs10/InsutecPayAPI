import React, { useEffect, useCallback } from 'react';
import { Stack, router, usePathname } from 'expo-router';
import { useFonts } from 'expo-font';
import { View, ActivityIndicator, Text, Platform } from 'react-native';
import { AuthProvider, useAuth } from '../components/AuthContext';
import { FinanceProvider } from '../components/FinanceContext';
import { ThemeProvider, useTheme } from './telas/ThemeContext/ThemeContext';
import CustomSplashScreen from './SplashScreen';

// Importando COLORS
const COLORS = {
Â  primary: '#39FF14',
Â  lightBackground: '#F0F2F5',
Â  darkBackground: '#0F0F0F',
Â  textDark: '#1C1C1C',
Â  textLight: '#E0E0E0',
Â  subText: '#888888',
Â  gray: '#9E9E9E',
Â  lightGray: '#E0E0E0',
Â  cardDark: '#1F1F1F',
Â  cardLight: '#FFFFFF',
};

// --- Cores de Fallback ---
const DEFAULT_COLORS = {
Â  primary: '#0b5394',
Â  lightBackground: '#f8f9fa',
Â  darkBackground: '#1F1F1F',
Â  textDark: '#333',
Â  textLight: '#E0E0E0',
};

// Obter cores seguras
const getColors = () => ({
Â  primary: COLORS?.primary || DEFAULT_COLORS.primary,
Â  lightBackground: COLORS?.lightBackground || DEFAULT_COLORS.lightBackground,
Â  darkBackground: COLORS?.darkBackground || DEFAULT_COLORS.darkBackground,
Â  textDark: COLORS?.textDark || DEFAULT_COLORS.textDark,
Â  textLight: COLORS?.textLight || DEFAULT_COLORS.textLight,
});

// =========================================================================
// Componente Principal que usa Authentication e Theme
// =========================================================================
function AppContent() {
Â  const { isDarkMode } = useTheme();
Â  const { isLoading, aluno } = useAuth();
Â  const pathname = usePathname();

Â  const { lightBackground, darkBackground, textLight, textDark } = getColors();

Â  // Define as cores dinÃ¢micas do Stack
Â  const stackBgColor = isDarkMode ? darkBackground : lightBackground;
Â  const headerTintColor = isDarkMode ? textLight : textDark;

Â  // Rotas pÃºblicas que nÃ£o requerem autenticaÃ§Ã£o
Â  const PUBLIC_ROUTES = [
Â  Â  '/telas/login/LoginScreen',
Â  Â  '/SplashScreen',
Â  ];

Â  // FunÃ§Ã£o para garantir a seguranÃ§a de rotas
Â  const checkAccess = useCallback(() => {
Â  Â  const isAuthenticated = !!aluno?.nr_estudante;
Â  Â  const isPublicRoute = PUBLIC_ROUTES.some((route) => pathname.startsWith(route));
Â  Â  const isIndexRoute = pathname === '/';

Â  Â  if (!isLoading) {
Â  Â  Â  // 1. NÃ£o autenticado em rota privada: Redireciona para o login
Â  Â  Â  if (!isAuthenticated && !isPublicRoute && !isIndexRoute) {
Â  Â  Â  Â  console.log('[AppContent] NÃ£o autenticado em rota privada. Redirecionando para Login.');
Â  Â  Â  Â  router.replace('/telas/login/LoginScreen');
Â  Â  Â  }
Â  Â  Â  // 2. Autenticado em rota pÃºblica: Redireciona para Home
Â  Â  Â  else if (isAuthenticated && (isPublicRoute || isIndexRoute)) {
Â  Â  Â  Â  console.log('[AppContent] Autenticado em rota pÃºblica. Redirecionando para Home.');
Â  Â  Â  Â  router.replace('/telas/home/HomeScreen');
Â  Â  Â  }
Â  Â  }
Â  }, [isLoading, aluno, pathname]);

Â  useEffect(() => {
Â  Â  checkAccess();
Â  }, [checkAccess]);

Â  // Mostrar Splash Screen enquanto carrega (AutenticaÃ§Ã£o)
Â  if (isLoading) {
Â  Â  console.log('[AppContent] Exibindo CustomSplashScreen (Carregando AutenticaÃ§Ã£o)');
Â  Â  return <CustomSplashScreen />;
Â  }

Â  console.log('[AppContent] Renderizando Stack Navigator - Dark Mode:', isDarkMode);

Â  return (
Â  Â  <Stack
Â  Â  Â  screenOptions={{
Â  Â  Â  Â  contentStyle: {
Â  Â  Â  Â  Â  backgroundColor: stackBgColor,
Â  Â  Â  Â  },
Â  Â  Â  Â  headerStyle: {
Â  Â  Â  Â  Â  backgroundColor: isDarkMode ? darkBackground : lightBackground,
Â  Â  Â  Â  Â  ...(Platform.OS === 'web' ? { boxShadow: '0 2px 4px rgba(0,0,0,0.1)' } : { elevation: 4 }),
Â  Â  Â  Â  Â  borderBottomWidth: 0,
Â  Â  Â  Â  },
Â  Â  Â  Â  headerTintColor,
Â  Â  Â  Â  headerTitleStyle: {
Â  Â  Â  Â  Â  fontWeight: 'bold',
Â  Â  Â  Â  Â  fontFamily: 'SpaceMono',
Â  Â  Â  Â  Â  color: headerTintColor,
Â  Â  Â  Â  },
Â  Â  Â  Â  headerBackTitleVisible: false,
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  {/* Rotas Principais */}
Â  Â  Â  <Stack.Screen
Â  Â  Â  Â  name="index"
Â  Â  Â  Â  options={{
Â  Â  Â  Â  Â  headerShown: false,
Â  Â  Â  Â  Â  redirect: !aluno ? '/telas/login/LoginScreen' : '/telas/home/HomeScreen',
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  {/* Rotas PÃºblicas */}
Â  Â  Â  <Stack.Screen name="telas/login/LoginScreen" options={{ headerShown: false }} />
Â  Â  Â  <Stack.Screen name="SplashScreen" options={{ headerShown: false }} />

Â  Â  Â  {/* Rotas Autenticadas - Home e ServiÃ§os */}
Â  Â  Â  <Stack.Screen name="telas/home/HomeScreen" options={{ headerShown: false }} />
Â  Â  Â  <Stack.Screen name="telas/servicos/Propina" options={{ title: 'Pagamento de Propina', headerShown: true }} />
Â  Â  Â  <Stack.Screen name="telas/servicos/Reconfirmacaomatricula" options={{ title: 'ReconfirmaÃ§Ã£o de MatrÃ­cula', headerShown: true }} />
Â  Â  Â  <Stack.Screen name="telas/servicos/FolhadeProva" options={{ title: 'SolicitaÃ§Ã£o de Folha de Prova', headerShown: true }} />
Â  Â  Â  <Stack.Screen name="telas/servicos/DeclaracaoNota" options={{ title: 'DeclaraÃ§Ã£o com Notas', headerShown: true }} />
Â  Â  Â  <Stack.Screen name="telas/servicos/DeclaracaoSemNota" options={{ title: 'DeclaraÃ§Ã£o sem Notas', headerShown: true }} />

Â  Â  Â  {/* Rotas de Pagamento e ServiÃ§os */}
Â  Â  Â  <Stack.Screen name="telas/ServicoPagamento/ServicoPagamentoScreen" options={{ title: 'ServiÃ§os e Pagamentos' }} />
Â  Â  Â  <Stack.Screen name="telas/ServicoPagamento/DetalhesPagamentoScreen" options={{ title: 'Detalhes do Pagamento' }} />

Â  Â  Â  {/* Rotas Financeiras */}
Â  Â  Â  <Stack.Screen name="telas/dividas/DividasScreen" options={{ title: 'Minhas DÃ­vidas' }} />
Â  Â  Â  <Stack.Screen name="telas/historico/HistoricoScreen" options={{ title: 'HistÃ³rico de Pagamentos' }} />
Â  Â  Â  <Stack.Screen name="telas/financeiro/CarteiraScreen" options={{ title: 'Minha Carteira' }} />
Â  Â  Â  <Stack.Screen name="telas/financeiro/RecibosScreen" options={{ title: 'HistÃ³rico de Recibos' }} />
Â  Â  Â  <Stack.Screen name="telas/comprovativo/ComprovativoScreen" options={{ title: 'Comprovativo de Pagamento' }} />
Â  Â  Â  
Â  Â  Â  {/* Rota Removida: telas/historico-comprovantes/HistoricoComprovantesScreen (Causava warning) */}
Â  Â  Â  
Â  Â  Â  {/* Rotas de Perfil e NotificaÃ§Ãµes */}
Â  Â  Â  <Stack.Screen name="telas/perfil/PerfilScreen" options={{ title: 'Meu Perfil' }} />
Â  Â  Â  <Stack.Screen name="telas/notificacoes/NotificacoesScreen" options={{ title: 'NotificaÃ§Ãµes' }} />

Â  Â  Â  {/* Rotas de Ajuda e InformaÃ§Ãµes */}
Â  Â  Â  <Stack.Screen name="telas/verAjuda/verAjudaScreen" options={{ title: 'Ajuda e Suporte', headerShown: true }} />
Â  Â  Â  <Stack.Screen name="telas/termos/TermosScreen" options={{ title: 'Termos e PolÃ­ticas', headerShown: true }} />
Â  Â  Â  <Stack.Screen name="telas/termos/SobreScreen" options={{ title: 'Sobre o App', headerShown: true }} />

Â  Â  Â  {/* Rotas de TransaÃ§Ã£o */}
Â  Â  Â  {/* Rota Removida: telas/financeiro/ReciboScreen (singular) (Causava warning, RecibosScreen (plural) permanece) */}
Â  Â  Â  
Â  Â  Â  {/* Rota de Fallback */}
Â  Â  Â  <Stack.Screen name="+not-found" options={{ headerShown: false }} />
Â  Â  </Stack>
Â  );
}

// =========================================================================
// Root Layout - ConfiguraÃ§Ã£o Principal
// =========================================================================
export default function RootLayout() {
Â  const [loaded, error] = useFonts({
Â  Â  SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
Â  });

Â  const { darkBackground, primary, textLight } = getColors();

Â  // Mostra tela de carregamento de fontes
Â  if (!loaded && !error) {
Â  Â  console.log('[RootLayout] Carregando fontes...');
Â  Â  return (
Â  Â  Â  <View style={{ flex: 1, backgroundColor: darkBackground, justifyContent: 'center', alignItems: 'center' }}>
Â  Â  Â  Â  <ActivityIndicator size="large" color={primary} />
Â  Â  Â  Â  <Text style={{ color: textLight, marginTop: 10, fontFamily: 'SpaceMono' }}>
Â  Â  Â  Â  Â  A carregar recursos...
Â  Â  Â  Â  </Text>
Â  Â  Â  </View>
Â  Â  );
Â  }

Â  if (error) {
Â  Â  console.error('[RootLayout] Erro ao carregar fontes:', error);
Â  Â  return (
Â  Â  Â  <View style={{ flex: 1, backgroundColor: darkBackground, justifyContent: 'center', alignItems: 'center' }}>
Â  Â  Â  Â  <Text style={{ color: textLight, fontFamily: 'SpaceMono' }}>
Â  Â  Â  Â  Â  Erro ao carregar fontes. Tente novamente.
Â  Â  Â  Â  </Text>
Â  Â  Â  </View>
Â  Â  );
Â  }

Â  console.log('[RootLayout] Fontes carregadas, inicializando app com Providers...');

Â  return (
Â  Â  <AuthProvider>
Â  Â  Â  <ThemeProvider>
Â  Â  Â  Â  {/* ðŸ›‘ O FinanceProvider DEVE envolver o AppContent */}
Â  Â  Â  Â  <FinanceProvider>
Â  Â  Â  Â  Â  <AppContent />
Â  Â  Â  Â  </FinanceProvider>
Â  Â  Â  </ThemeProvider>
Â  Â  </AuthProvider>
Â  );
}


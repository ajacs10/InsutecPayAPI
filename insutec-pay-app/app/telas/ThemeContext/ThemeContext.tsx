import React, { createContext, useContext, useState, ReactNode } from 'react';
import { useColorScheme } from 'react-native'; // Usar a preferÃªncia do sistema Ã© mais comum!

interface ThemeContextType {
Â  isDarkMode: boolean;
Â  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: ReactNode }) {
Â  // Usa a preferÃªncia do sistema ou 'true' se quiseres forÃ§ar DarkMode
Â  const colorScheme = useColorScheme(); 
Â  const [isDarkMode, setIsDarkMode] = useState(colorScheme === 'dark'); 

Â  const toggleTheme = () => {
Â  Â  setIsDarkMode((prev) => !prev);
Â  };

Â  return (
Â  Â  <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>
Â  Â  Â  {children}
Â  Â  </ThemeContext.Provider>
Â  );
}

export const useTheme = () => {
Â  const context = useContext(ThemeContext);
Â  if (!context) {
Â  Â  throw new Error('useTheme must be used within a ThemeProvider');
Â  }
Â  return context;
};

// ðŸ’¥ CORREÃ‡ÃƒO (Para o Expo Router): 
// Exportar um componente nulo para satisfazer o requisito de default export do router
const ThemeContextPlaceholder = () => null; 
export default ThemeContextPlaceholder;
